#! /usr/bin/env nix-shell
#! nix-shell -i python -p python2 pythonPackages.requests pythonPackages.lxml
import pickle
import os
import subprocess
import collections
import requests
from lxml import etree

with open('jenkins/ci/jenkins/gen-jenk-plugins/src/plugins.txt', 'r+') as f:
    PLUGINS = [line.strip() for line in f.readlines()]

DOMAIN = "https://updates.jenkins-ci.org"
ROOT = DOMAIN + "/download/plugins/"
Plugin = collections.namedtuple("Plugin", "version name url sha")


def plugins():
    tree = etree.HTML(requests.get(ROOT).content)
    for x in tree.xpath("//a"):
        href = x.get("href")
        if href.startswith("?C") or href.startswith("/"):
            continue
        yield ROOT + x.get("href")


def get_cached(url):
    if not os.path.exists(".metadata-cache.pickle"):
        return None
    with open(".metadata-cache.pickle", "r") as f:
        return pickle.load(f).get(url)


def set_cached(url, plugin):
    if not os.path.exists(".metadata-cache.pickle"):
        x = dict()
    else:
        with open(".metadata-cache.pickle", "r") as f:
            x = pickle.load(f)
    with open(".metadata-cache.pickle", "w") as f:
        x[url] = plugin
        pickle.dump(x, f, -1)


def versions(url):
    tree = etree.HTML(requests.get(url).content)
    for x in tree.xpath("//a"):
        if not x.get("href").endswith(".hpi"):
            continue

        # Only keep latest version for testing for now
        version = x.get("href").split("/")[-2]
        if version == "latest":
            continue

        fetch_url = DOMAIN + x.get("href")
        if get_cached(fetch_url) is not None:
            yield get_cached(fetch_url)
            continue

        try:
            sha = subprocess.check_output(["nix-prefetch-url", fetch_url]).strip()
        except subprocess.CalledProcessError:
            yield Plugin(version, url.split("/")[-2], fetch_url, "BROKEN (might be 404)")
            continue
        plugin = Plugin(version, url.split("/")[-2], fetch_url, sha)
        set_cached(fetch_url, plugin)
        yield plugin


TEMPLATE = """\
  {name} = mkJenkinsPlugin {{
    name = "{name}";
    src = fetchurl {{
      url = "{url}";
      sha256 = "{sha}";
    }};
  }};
"""

HEADER = """\
# Autogenerated by https://github.com/teh/jenkins-plugins-to-nix
# Do not edit by hand, changes will be overwritten!
{ stdenv, fetchurl }:
let mkJenkinsPlugin = { name, src }: stdenv.mkDerivation {
  name = name;
  src = src;
  phases = "installPhase";
  installPhase = ''
    mkdir $out
    cp --recursive $src $out
  '';
};
in rec {
"""

FOOTER = """\
}
"""


def derivation(plugin):
    return TEMPLATE.format(name=plugin.name, version=plugin.version, url=plugin.url, sha=plugin.sha)


class Style():
    black = '\033[30m'
    red = '\033[31m'
    green = '\033[32m'
    yellow = '\033[33m'
    blue = '\033[34m'
    magenta = '\033[35m'
    cyan = '\033[36m'
    white = '\033[37m'
    underline = '\033[4m'
    reset = '\033[0m'


def main():
    with open("plugins.nix", "w") as f:
        f.write(HEADER)
        for url in plugins():
            if url.split("/")[-2] in PLUGINS:
                print("{}[ NEW ] {}{}".format(Style.green, url, Style.reset))
                f.write(derivation(versions(url).next()))
            else:
                print("{}[ SKIP ] {}{}".format(Style.red, url, Style.reset))
        f.write(FOOTER)

if __name__ == "__main__":
    main()
